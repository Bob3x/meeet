{"version":3,"file":"static/js/567.c55c3337.chunk.js","mappings":"uNAKA,MA+CA,EA/CwBA,IAA+B,IAA9B,aAAEC,EAAY,OAAEC,GAAQF,EAC7C,MAAOG,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GAErCG,GAAUC,EAAAA,EAAAA,cAAY,IACXR,EAAaS,KAAKC,IAC3B,MAAMC,EAAQV,EAAOW,QAAQC,GAAUA,EAAMH,WAAaA,IAAUI,OAEpE,MAAO,CAAEC,KADIL,EAASM,MAAO,UAAW,GACzBL,QAAO,KAG3B,CAACX,EAAcC,IAalB,OAXAgB,EAAAA,EAAAA,YAAU,KACN,IACIX,GAAa,GACbH,EAAQI,IACZ,CAAE,MAAOW,GACLC,QAAQD,MAAM,yBAA0BA,EAC5C,CAAC,QACGZ,GAAa,EACjB,IACD,CAACC,EAASP,EAAc,GAAGC,MAE1BI,GAAkBe,EAAAA,EAAAA,KAAA,OAAAC,SAAK,0BACtBpB,EAAOa,QAGRM,EAAAA,EAAAA,KAACE,EAAAA,EAAmB,CAACC,MAAM,MAAMC,OAAQ,IAAIH,UACzCI,EAAAA,EAAAA,MAACC,EAAAA,EAAY,CACTC,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,MAAO,IACTV,SAAA,EAEFD,EAAAA,EAAAA,KAACY,EAAAA,EAAa,KACdZ,EAAAA,EAAAA,KAACa,EAAAA,EAAK,CAACC,KAAK,WAAWC,QAAQ,OAAOC,KAAK,OAAOC,MAAO,GAAIC,SAAU,EAAGC,KAAM,CAAEC,GAAI,GAAIC,GAAI,GAAIC,SAAU,OAC5GtB,EAAAA,EAAAA,KAACuB,EAAAA,EAAK,CAACT,KAAK,SAASC,QAAQ,QAAQC,KAAK,mBAAmBQ,eAAe,KAC5ExB,EAAAA,EAAAA,KAACyB,EAAAA,EAAO,CAACC,OAAQ,CAAEC,gBAAiB,UACpC3B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACZ,KAAK,cAAclC,KAAMA,EAAM+C,KAAK,kBAhB9B7B,EAAAA,EAAAA,KAAA,OAAAC,SAAK,wBAkBN,C","sources":["components/CityEventsChart.js"],"sourcesContent":["// src/components/CityEventsChart.js\r\n\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\r\n\r\nconst CityEventsChart = ({ allLocations, events }) => {\r\n    const [data, setData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const getData = useCallback(() => {\r\n        const data = allLocations.map((location) => {\r\n            const count = events.filter((event) => event.location === location).length\r\n            const city = location.split((/, | - /))[0]\r\n            return { city, count };\r\n        })\r\n        return data;\r\n    }, [allLocations, events]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setIsLoading(true);\r\n            setData(getData());\r\n        } catch (error) {\r\n            console.error(\"Error displaying data:\", error);\r\n        }finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [getData, allLocations, `${events}`]);\r\n\r\n    if (isLoading) return <div>Loading chart data...</div>;\r\n    if (!events.length) return <div>No events to display</div>;\r\n\r\n    return (\r\n        <ResponsiveContainer width=\"99%\" height={400}>\r\n            <ScatterChart\r\n                margin={{\r\n                    top: 20,\r\n                    right: 20, \r\n                    bottom: 60, \r\n                    left: -30,\r\n                }}\r\n                >\r\n                <CartesianGrid />\r\n                <XAxis type=\"category\" dataKey=\"city\" name=\"City\" angle={60} interval={0} tick={{ dx: 20, dy: 40, fontSize: 14 }} />\r\n                <YAxis type=\"number\" dataKey=\"count\" name=\"Number of events\" allowDecimals={false} />\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Scatter name=\"City-events\" data={data} fill=\"#8884d8\" /> \r\n                </ScatterChart>\r\n        </ResponsiveContainer>\r\n    );\r\n};\r\n\r\nexport default CityEventsChart;"],"names":["_ref","allLocations","events","data","setData","useState","isLoading","setIsLoading","getData","useCallback","map","location","count","filter","event","length","city","split","useEffect","error","console","_jsx","children","ResponsiveContainer","width","height","_jsxs","ScatterChart","margin","top","right","bottom","left","CartesianGrid","XAxis","type","dataKey","name","angle","interval","tick","dx","dy","fontSize","YAxis","allowDecimals","Tooltip","cursor","strokeDasharray","Scatter","fill"],"sourceRoot":""}